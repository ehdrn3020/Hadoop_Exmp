###EX 1
#maven
    <dependency>
      <groupId>com.databricks</groupId>
      <artifactId>spark-csv_2.11</artifactId>
      <version>1.0.1</version>
    </dependency>
    
 #code1 spark < 2.0.0
 package com.dgkang
import org.apache.spark.SparkContext
import org.apache.spark.SparkConf
import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.types.{StructType, StructField, StringType, IntegerType};
object Spark {
  def main(args: Array[String]): Unit = {
    val conf = new SparkConf().setAppName("Read CSV spark").setMaster("local")
    val sc = new SparkContext(conf)
    val sqlContext = new SQLContext(sc)

    val customSchema = StructType(Array(
      StructField("year", IntegerType, true),
      StructField("make", StringType, true),
      StructField("model",StringType, true),
      StructField("comment", StringType, true)
    ))

    val pathToFile = "CSV.csv"
    val df = sqlContext.read
        .format("com.databricks.spark.csv")
        .option("header","true")
        .option("inferSchema","true")
        .load(pathToFile)
    println("Start Spark dg...")

    df.rdd.cache()
    df.rdd.foreach(println)
    println(df.printSchema)
    df.registerTempTable("CSV")

    sqlContext.sql("select * from CSV").collect.foreach(println)

  }
}



#code2 spark > 2.0.0

#Creating a SparkSession
// Create a SparkSession. No need to create SparkContext
// You automatically get it as part of the SparkSession
val warehouseLocation = "file:${system:user.dir}/spark-warehouse"
val spark = SparkSession
   .builder()
   .appName("SparkSessionZipsExample")
   .config("spark.sql.warehouse.dir", warehouseLocation)
   .enableHiveSupport()
   .getOrCreate()


#Configuring Sparkâ€™s Runtime Properties
//set new runtime options
spark.conf.set("spark.sql.shuffle.partitions", 6)
spark.conf.set("spark.executor.memory", "2g")
//get all settings
val configMap:Map[String, String] = spark.conf.getAll()


#Accessing Catalog Metadata
//fetch metadata data from the catalog
spark.catalog.listDatabases.show(false)
spark.catalog.listTables.show(false)


#Creating Datasets and Dataframes
//create a Dataset using spark.range starting from 5 to 100, with increments of 5
val numDS = spark.range(5, 100, 5)
// reverse the order and display first 5 items
numDS.orderBy(desc("id")).show(5)
//compute descriptive stats and display them
numDs.describe().show()
// create a DataFrame using spark.createDataFrame from a List or Seq
val langPercentDF = spark.createDataFrame(List(("Scala", 35), ("Python", 30), ("R", 15), ("Java", 20)))
//rename the columns
val lpDF = langPercentDF.withColumnRenamed("_1", "language").withColumnRenamed("_2", "percent")
//order the DataFrame in descending order of percentage
lpDF.orderBy(desc("percent")).show(false)

Ref : https://databricks.com/blog/2016/08/15/how-to-use-sparksession-in-apache-spark-2-0.html
